// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model DailyTransactions {
  id             Int      @id @default(autoincrement())
  userId         Int?
  user           User?    @relation(fields: [userId], references: [id], name: "daily_transactions", onDelete: NoAction, onUpdate: NoAction)
  verifiedById   Int?
  verifiedBy     User?    @relation(fields: [verifiedById], references: [id], name: "verified_daily_transactions", onDelete: NoAction, onUpdate: NoAction)
  verified       Boolean? @default(false)
  openingbalance Int?     @default(0)
  closingbalance Int?     @default(0)
  normalSales    Int?     @default(0)
  virtualSales   Int?     @default(0)
  normalPayout   Int?     @default(0)
  onlineSales    Int?     @default(0)
  onlinePayout   Int?     @default(0)
  vurtualPayout  Int?     @default(0)
  cashIn         Int?     @default(0)
  cashOut        Int?     @default(0)
  expenses       Int?     @default(0)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("daily_transactions")
}

model User {
  id                 Int     @id @default(autoincrement())
  username           String
  password           String
  code               String?
  roleId             Int?    @map("role_id")
  role               Role?   @relation(fields: [roleId], references: [id])
  auth_code          String?
  virtualToken       String? @map("virutal_token")
  registrationSource String? @map("registration_source")
  trackierToken      String? @map("trakier_token")
  lastLogin          String? @map("last_login")
  status             Int     @default(1)
  verified           Int     @default(1)

  createdAt      DateTime               @default(now()) @map("created_at")
  updatedAt      DateTime               @updatedAt @map("updated_at")
  userDetails    UserDetails?
  bettingParams  UserBettingParameter[]
  userSetting    UserSetting?
  segmentCreator PlayerSegment[]
  segments       PlayerUserSegment[]

  agentUser               AgentUser?          @relation("agentUser")
  agentUsers              AgentUser[]         @relation("agent")
  verifydailyTransactions DailyTransactions[] @relation("verified_daily_transactions")
  dailyTransactions       DailyTransactions[] @relation("daily_transactions")

  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId Int

  @@map("users")
}

model UserDetails {
  id            Int     @id @default(autoincrement())
  firstName     String?
  lastName      String?
  email         String?
  city          String?
  country       String?
  state         String?
  address       String?
  gender        String?
  currency      String?
  phone         String?
  date_of_birth String?
  language      String?
  userId        Int     @unique @map("user_id")
  user          User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user_details")
}

model AgentUser {
  id        Int  @id @default(autoincrement())
  agent_id  Int
  agent     User @relation(fields: [agent_id], references: [id], name: "agent", onDelete: NoAction, onUpdate: NoAction)
  user_id   Int  @unique
  agentUser User @relation(fields: [user_id], references: [id], name: "agentUser", onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("agent_users")
}

model Client {
  id            Int      @id @default(autoincrement())
  name          String
  country       String
  currency      String
  groupName     String?
  apiUrl        String?
  contactNumber String?
  contactEmail  String
  webUrl        String?
  mobileUrl     String?
  shopUrl       String?
  oAuthToken    String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  users    User[]
  segments PlayerSegment[]
  settings Setting[]

  @@map("clients")
}

model Setting {
  id        Int      @id @default(autoincrement())
  clientId  Int      @map("client_id")
  client    Client   @relation(fields: [clientId], references: [id])
  option    String
  value     String
  category  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([clientId, option, category], name: "client_option_category")
  @@map("settings")
}

model Role {
  id               Int              @id @default(autoincrement())
  name             String           @unique
  description      String
  type             String?
  user             User[]
  role_permissions RolePermission[]
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")

  @@map("roles")
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("permissions")
}

model RolePermission {
  id           Int      @id @default(autoincrement())
  roleID       Int      @map("role_id")
  role         Role?    @relation(fields: [roleID], references: [id])
  permissionID Int
  createdAt    DateTime @default(now())

  @@map("role_permissions")
}

model UserBettingParameter {
  id                   Int    @id @default(autoincrement())
  userId               Int    @map("user_id")
  user                 User   @relation(fields: [userId], references: [id])
  period               String @default("period")
  max_payout           Float  @default(0)
  single_odd_length    Int    @default(100)
  combi_odd_length     Int    @default(1000000)
  size_max             Int?   @default(1)
  size_min             Int?   @default(40)
  single_min           Float  @default(100)
  single_max           Float  @default(10000)
  combi_min            Float  @default(100)
  combi_max            Float  @default(10000)
  max_time_to_cancel   Int?   @default(300)
  daily_cancel_limit   Int?   @default(5)
  hold_bets_from       Float  @default(100000)
  single_max_winning   Float  @default(100000)
  min_withdrawal       Float  @default(1000)
  max_withdrawal       Float  @default(100000)
  min_bonus_odd        Float  @default(100000)
  live_size_min        Int?   @default(1)
  live_size_max        Int?   @default(20)
  enable_cashout       Int?   @default(0)
  enable_cut_x         Int?   @default(0)
  max_duplicate_ticket Int?   @default(4)
  accept_prematch_bets Int?   @default(1)
  accept_live_bets     Int?   @default(1)
  accept_system_bets   Int?   @default(1)
  accept_split_bets    Int?   @default(1)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, period], name: "user_period")
  @@map("user_betting_parameters")
}

model UserSetting {
  id                  Int     @id @default(autoincrement())
  userId              Int     @unique @map("user_id")
  user                User    @relation(fields: [userId], references: [id])
  dailyDepositLimit   Float?  @map("daily_deposit_limit")
  weeklyDepositLimit  Float?  @map("weekly_deposit_limit")
  monthlyDepositLimit Float?  @map("monthly_deposit_limit")
  selfExclusionPeriod String? @map("self_exclusion_period")
  excludeFrom         String? @map("exclude_from")
  emailCommunication  Int?    @default(1) @map("email_communication")
  smsCommunication    Int?    @default(1) @map("sms_communication")
  promotionalPopUp    Int?    @default(1) @map("promotional_pop_up")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user_settings")
}

model PlayerSegment {
  id           Int     @id @default(autoincrement())
  title        String
  minOdd       Float?  @map("min_odd")
  minSelection Int?    @map("min_selection")
  message      String?

  createdBy Int?
  creator   User? @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId Int

  userSegment PlayerUserSegment[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("player_segments")
}

model PlayerUserSegment {
  id Int @id @default(autoincrement())

  segmentId Int           @map("segment_id")
  segment   PlayerSegment @relation(fields: [segmentId], references: [id], onDelete: Cascade)

  userId Int  @map("user_id")
  player User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("player_user_segments")
}

model Country {
  id              Int           @id @default(autoincrement())
  name            String
  CountryCodeLong String        @map("country_code_long")
  CountryCode     String        @map("country_code")
  DialCode        String        @map("dial_code")
  region          CountryRegion
  CurrencyName    String        @map("currency_name")
  CurrencyCode    String        @map("currency_code")
  CurrencySymbol  String?       @map("currency_symbol")
  CountryFlag     String?       @map("country_flag")
  states          State[]

  @@map("countries")
}

model State {
  id        Int     @id @default(autoincrement())
  name      String
  countryId Int     @map("country_id")
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@map("states")
}

enum CountryRegion {
  Africa
  Antarctica
  Asia
  Europe
  North_America @map("North America")
  Oceania
  South_America @map("South America")
}
